üìë R√©partition Finale des T√¢ches ‚Äî Projet "Syst√®me Questions-R√©ponses Constitution"
Membres : Badr, Hamet, Amine, Hanae

üîµ Badr ‚Äî Extraction + Syst√®me RAG (G√©n√©ration) + Prototype React
Missions principales :
Extraction et pr√©paration du texte

Technologies : PyPDF2, pdfminer.six, re (expressions r√©guli√®res)

Extraire proprement la Constitution, nettoyer et segmenter par article/section.

Objectif : Obtenir des morceaux de texte bien structur√©s et indexables.

D√©veloppement du module de g√©n√©ration de r√©ponses

Technologies : OpenAI API, HuggingFace, prompt engineering

Connecter le mod√®le de g√©n√©ration (LLM) aux documents r√©cup√©r√©s.

Ajouter des citations automatiques pour justifier les r√©ponses.

(Bonus si temps) : D√©veloppement d‚Äôune application React s√©par√©e

Technologies : React, Axios, TailwindCSS

Front-end moderne se connectant √† l‚ÄôAPI Streamlit ou FastAPI.

Permet d‚Äôavoir une interface plus professionnelle pour une √©ventuelle d√©mo publique.

Astuces :
Utiliser langchain pour simplifier l'appel du mod√®le LLM.

Pr√©parer une API simple en FastAPI si besoin pour brancher React proprement.

üîµ Hamet ‚Äî Embeddings + Moteur de Recherche
Missions principales :
Cr√©ation des embeddings vectoriels

Technologies : Sentence-Transformers, mod√®le all-MiniLM-L6-v2 ou legal-BERT

Transformer les segments d'articles en vecteurs pour la recherche.

Mise en place de la base de donn√©es vectorielle

Technologies : FAISS, Pinecone

Stocker les vecteurs, optimiser les recherches (cosine similarity).

D√©veloppement du moteur de recherche s√©mantique

Trouver les meilleurs articles correspondants aux questions pos√©es.

Astuces :
Garder les chunks de 300-500 tokens pour de meilleurs r√©sultats de similarit√©.

Tester diff√©rents types d‚Äôindex FAISS (IndexFlatL2, IVF).

üü° Amine ‚Äî D√©veloppement Interface Streamlit + Rapport + Tests
Missions principales :
D√©veloppement de l'interface principale en Streamlit

Technologies : Streamlit, Python

Permettre √† l'utilisateur de poser une question ‚Üí recevoir r√©ponse + source.

Tests fonctionnels du syst√®me

Pr√©parer un ensemble vari√© de questions.

Noter la pr√©cision, la pertinence et la rapidit√© des r√©ponses.

R√©daction du rapport final

Technologies : Word, Google Docs

R√©diger tout le rapport (bas√© sur le plan que je t‚Äôai donn√© avant).

Astuces :
Utiliser st.cache_data pour am√©liorer la rapidit√© des r√©ponses similaires.

Cr√©er un bel affichage pour les r√©f√©rences/citations dans Streamlit.

üü¢ Hanae ‚Äî Am√©lioration de l'Interface + Pr√©sentation + Optimisation
Missions principales :
Am√©lioration visuelle de l'interface Streamlit

Ajouter des √©l√©ments comme historique de conversation, style des r√©ponses.

Rendre l'affichage des sources plus √©l√©gant.

Cr√©ation de la pr√©sentation finale du projet

Technologies : Canva, PowerPoint

Slides clairs : Contexte ‚ûî Solution ‚ûî D√©monstration ‚ûî R√©sultats ‚ûî Conclusion.

Impl√©mentation de la mise en cache des r√©ponses

Technologies : SQLite, Streamlit @st.cache_data

Cacher les r√©sultats pour les questions fr√©quentes.

Astuces :
Ajouter un st.sidebar pour afficher l‚Äôhistorique utilisateur simplement.

Faire une pr√©sentation de 8-10 slides maximum pour √™tre fluide et clair.